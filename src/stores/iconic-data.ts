import {writable} from "svelte/store";

export type iconicDataType = {
  _: string;
  modules: Array<iconicDataModule>;
};

export type iconicDataModule = {
  key: string;
  raw: string;
  parts: Array<iconicDataPart>;
};

export type iconicDataPart = string;

export function isIconicDataType(arg: any): arg is iconicDataType {
  if (!arg) throw new Error("Missing arg");
  if (!arg._) throw new Error("Missing arg._");
  if (arg._ !== "Generated by KTaNE Iconic Editor. DO NOT EDIT.") throw new Error("Invalid arg._");
  if (!arg.modules) throw new Error("Missing arg.modules");
  if (!Array.isArray(arg.modules)) throw new Error("Invalid type arg.modules");
  for (let i = 0; i < arg.modules.length; i++) {
    try {
      isIconicDataModule(arg.modules[i]);
    } catch (e) {
      throw new Error("Invalid arg.modules item: " + e);
    }
  }
  if (!isUnique(arg.modules, x => x.key)) throw new Error("Non-unique key in arg.modules");
  return true;
}

function isIconicDataModule(arg: any): arg is iconicDataModule {
  if (!arg.key) throw new Error("Missing arg.key");
  if (typeof arg.key != "string") throw new Error("Invalid type arg.key");
  if (!arg.raw) throw new Error("Missing arg.raw");
  if (typeof arg.raw != "string") throw new Error("Invalid type arg.raw");
  ["░", "▒", "▓", "═", "║"].forEach(element => {
    if (arg.raw.includes(element)) throw new Error("Module string contains invalid block characters from old iconic generator");
  });
  if (!arg.parts) throw new Error("Missing arg.parts");
  if (!Array.isArray(arg.parts)) throw new Error("Invalid type arg.parts");
  for (let i = 0; i < arg.parts.length; i++) {
    try {
      isIconicDataPart(arg.parts[i]);
    } catch (e) {
      throw new Error("Invalid arg.parts item: " + e);
    }
  }
  if (!isUnique(arg.parts, x => x)) throw new Error("Non-unique name in arg.parts");
  return true;
}

function isIconicDataPart(arg: any): arg is iconicDataPart {
  if (!arg) throw new Error("Missing part");
  if (typeof arg != "string") throw new Error("Invalid type for part");
  return true;
}

function isUnique(x: Array<any>, f: (x: any) => any): boolean {
  return (
    x.filter((value, index, self) => {
      return self.findIndex(v => f(v) === f(value)) === index;
    }).length === x.length
  );
}

export const iconicData = writable<iconicDataType>({
  _: "Generated by KTaNE Iconic Editor. DO NOT EDIT.",
  modules: [],
});

export const iconicUnsaved = writable<{[key: string]: boolean}>({});
